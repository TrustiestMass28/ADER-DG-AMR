import yt
import pathlib
import imageio
import os
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import linregress

def main_convergence():
    
    #Volume/domain size [-1,1]x[-1,1]x[-1,1]
    D = 2
    v = 2**D
    V_ary   = np.square(np.array([v,v]))
    N   =  np.array([8,16,32])#,64
    #h   = np.power(np.divide(V_ary,N), np.array([1.0/D,1.0/D]))

    L = 1
    p =5
    #IC return Real(1.) + (amrex::Real)std::exp(-(amrex::Real)std::pow(r,2.0)/0.1);} CFL=0.9

    #p_E=[p0_E,p1_E,p2_E,p3_E]
    flag_plot = False
    if L==1:       
        p_E = [np.array([0.0]),
               np.array([0.018363420858857626,0.0071435359188875844,0.0016756981517796444,0.00029185917512232018,4.4151014437171095e-05]),
               #np.array([0.0044951958155098632,0.00075640326692240692,6.3484046231838118e-05,7.7768275565588429e-06,1.1153892173507107e-06]),#2SINGLE               
               np.array([0.005447897426643292,0.00053575714724873544,0.00015294029851719912,1.0597978053752066e-05,1.1036832213462399e-06]),
               #np.array([0.001406745610801679,9.1311899167691754e-05,4.0288590457103693e-06,1.8033256984419362e-07,9.2437515637408523e-09]),#single               
               np.array([0.0019809085652007243,0.00019834295969736114,1.2759728655860959e-05,7.432165983567419e-07,4.11452175900288e-08]),#amr
               np.array([0.0]),
               np.array([0.00018575023986687359,3.2451463736378663e-06,7.6173735609274236e-08]),
               np.array([5.445614756159535e-05,6.9997379526456935e-07,6.0718504597478802e-09,1.37626916261062e-10]),
               np.array([])
               ]
   
    elif L==2:       
        p_E = [np.array([0.0]),
               np.array([0.045349110333034869,0.019038855945820294,0.0039867707231817807,0.00071226093827372135,0.00011005657599364319]),
               #np.array([0.0087973146828823311,0.0017007895204023025,0.00012845163963632738,1.5800247121384612e-05,2.3255024700448608e-06]),#2SINGLE
               np.array([0.0079626791615442869,0.0019065416753764649,0.00056640395843538622,4.3642374196176005e-05,7.8912720410333035e-06]),#2AMR
               #np.array([0.0027704599804530649,0.00017582868446736435,7.8639188249991049e-06,3.9797339996578247e-07,2.1753052300149248e-08]),
               np.array([0.0027902089136998638,0.00062289193083414423,4.4081319109529674e-05,2.9977425153553014e-06,1.8444281497033121e-07]),
               np.array([0.0]),
               np.array([0.0]),
               np.array([8.3997411769564642e-05,1.0199516402452219e-06,8.6343202112843542e-09,3.5373312372793171e-10]),
               np.array([])
               ]
        
        
        
    for i in range(len(N)-1):
        alpha = abs((np.log10(p_E[p][i])-np.log10(p_E[p][i+1]))/(np.log10(N[i])-np.log10(N[i+1])))
        print(alpha)
    slope, intercept, r_value, p_value, std_err = linregress(np.log10(N), np.log10(p_E[p]))
    print("EOC p"+str(p)+": "+str(abs(slope)))  
    print("TOC p"+str(p)+": "+str(p+1))  



    #"""""
    if flag_plot:
        plt.figure(figsize=(10, 6))
        plt.plot(N, p_E[p], 'o-', label='$DG-p=$'+str(p))
        plt.xscale('log')
        plt.yscale('log')
        plt.xlabel('$N$ [-]', fontsize=20)
        if L==1:
            plt.ylabel('$\epsilon_{L^1(\Omega)}(\\rho)$ [-]', fontsize=20)
        elif L==2:
            plt.ylabel('$\epsilon_{L^2(\Omega)}(\\rho)$ [-]', fontsize=20)
        #plt.title('ADER-D')
        plt.legend()
        plt.grid(True)
        #plt.show()
        plt.savefig("plots/2d_advectionx_grid_convergence.png")
    #"""""
if __name__ == "__main__":
    #tmp_func()
    main_convergence()



    #L1
    """""
        p_E = [
        #np.array([0.030450992632395431,0.018402618898396613,0.010322793747214079,0.0055159963745053109,0.0028588322317037499,0.0014563924457844531]),  
        np.array([0.064531090117648376,0.045990587026766741,0.030450992632395431,0.018402618898396613,0.010322793747214079,0.0055159963745053109,0.0028588322317037499,0.0014563924457844531]),           
        #np.array([0.0029431341203199736,0.00091824152612293751,0.00026768057393946411,7.3561068518815983e-05,1.9406640734262797e-05,4.9953150654470032e-06]),
        np.array([0.026069021180111479,0.0090725889142389098,0.0029431341203199736,0.00091824152612293751,0.00026768057393946411,7.3561068518815983e-05,1.9406640734262797e-05,4.9953150654470032e-06]),
        #np.array([0.00014066503224802722,2.1479188536686181e-05,3.1369530848219026e-06,4.3672828879204468e-07,5.9196058957618659e-08,8.1266961628508254e-09]),
        np.array([0.0061382265392621958,0.00093096365305274267,0.00014066503224802722,2.1479188536686181e-05,3.1369530848219026e-06,4.3672828879204468e-07,5.9196058957618659e-08,8.1266961628508254e-09]),
        #np.array([5.5504611223072797e-06,4.2800116472525344e-07,3.6492939598314433e-08,4.3012935657751135e-09,8.7377402221359146e-10,2.4810955614424087e-10])
        np.array([0.0011022136534350876,7.8329963005511829e-05,5.5504611223072797e-06,4.2800116472525344e-07,3.6492939598314433e-08,4.3012935657751135e-09,8.7377402221359146e-10,2.4810955614424087e-10])
        ]
    """""
    #L2        
    """""
        p_E = [
        #np.array([0.031725424604785661,0.019831060101701169,0.011414543773920777,0.006189876607725766,0.0032342424221216241,0.0016547487623445533]),     
        np.array([0.062927274778695558,0.046350140996590065,0.031725424604785661,0.019831060101701169,0.011414543773920777,0.006189876607725766,0.0032342424221216241,0.0016547487623445533]),      
        #np.array([0.0026367730596233486,0.00084531795409946333,0.0002538618693888017,7.1244254197264852e-05,1.9028638548019946e-05,4.9296837342391861e-06]),
        np.array([0.02358077801363144,0.008083504668478762,0.0026367730596233486,0.00084531795409946333,0.0002538618693888017,7.1244254197264852e-05,1.9028638548019946e-05,4.9296837342391861e-06]),
        #np.array([0.00012637738986732833,1.993426872255104e-05,3.0019940915650473e-06,4.2511733153825862e-07,5.9678708081054953e-08,1.1142429788021632e-08]),
        np.array([0.0055649518658465414,0.00083708395133520687,0.00012637738986732833,1.993426872255104e-05,3.0019940915650473e-06,4.2511733153825862e-07,5.9678708081054953e-08,1.1142429788021632e-08]),
        #np.array([5.0279144963149428e-06,3.9820965563692e-07,4.8732806675287251e-08,1.6869683665594668e-08,7.1982813052373706e-09,3.1139542901898386e-09])
      np.array([0.0010292982496773139,7.0844023356794405e-05,5.0279144963149428e-06,3.9820965563692e-07,4.8732806675287251e-08,1.6869683665594668e-08,7.1982813052373706e-09,3.1139542901898386e-09])
        ]
    """""
